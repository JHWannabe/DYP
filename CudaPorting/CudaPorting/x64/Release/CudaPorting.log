  Compiling CUDA source file main.cu...
  
  C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\bin\nvcc.exe" -gencode=arch=compute_52,code=\"sm_52,compute_52\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\bin\HostX64\x64" -x cu   -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include" -I"C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include"     --keep-dir x64\Release  -maxrregcount=0   --machine 64 --compile -cudart static    -DWIN32 -DWIN64 -DNDEBUG -D_CONSOLE -D_MBCS -Xcompiler "/EHsc /W3 /nologo /O2 /FS   /MD " -Xcompiler "/Fdx64\Release\vc143.pdb" -o C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\x64\Release\main.cu.obj "C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu" 
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(853): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(7276): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(14857): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(18477): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(20651): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(21325): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/Default/Half.h(1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/Default/BFloat16.h(1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/GPU/PacketMath.h(1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/Default/GenericPacketMathFunctions.h(676): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/products/GeneralBlockPanelKernel.h(2063): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/core.hpp(1187): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/core.hpp(1187): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/core.hpp(1187): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(223): warning #20012-D: __host__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(const DenseStorage&) = default;
                   ^
  
  Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(223): warning #20012-D: __device__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(const DenseStorage&) = default;
                                        ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(233): warning #20012-D: __host__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(const DenseStorage&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(233): warning #20012-D: __device__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(const DenseStorage&) = default;
                                        ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(248): warning #20012-D: __host__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(DenseStorage&&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(248): warning #20012-D: __device__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(DenseStorage&&) = default;
                                        ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(249): warning #20012-D: __host__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(DenseStorage&&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(249): warning #20012-D: __device__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(DenseStorage&&) = default;
                                        ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/warpers.hpp(235): warning #611-D: overloaded virtual function "cv::detail::PlaneWarper::buildMaps" is only partially overridden in class "cv::detail::AffineWarper"
    class  AffineWarper : public PlaneWarper
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/warpers.hpp(235): warning #611-D: overloaded virtual function "cv::detail::PlaneWarper::warp" is only partially overridden in class "cv::detail::AffineWarper"
    class  AffineWarper : public PlaneWarper
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/matchers.hpp(182): warning #611-D: overloaded virtual function "cv::detail::FeaturesMatcher::match" is only partially overridden in class "cv::detail::BestOf2NearestMatcher"
    class  BestOf2NearestMatcher : public FeaturesMatcher
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/matchers.hpp(236): warning #611-D: overloaded virtual function "cv::detail::FeaturesMatcher::match" is only partially overridden in class "cv::detail::AffineBestOf2NearestMatcher"
    class  AffineBestOf2NearestMatcher : public BestOf2NearestMatcher
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/blenders.hpp(100): warning #611-D: overloaded virtual function "cv::detail::Blender::prepare" is only partially overridden in class "cv::detail::FeatherBlender"
    class  FeatherBlender : public Blender
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/blenders.hpp(127): warning #611-D: overloaded virtual function "cv::detail::Blender::prepare" is only partially overridden in class "cv::detail::MultiBandBlender"
    class  MultiBandBlender : public Blender
           ^
  
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(853): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(7276): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(14857): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(18477): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(20651): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda.h(21325): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.2/include\cuda_runtime_api.h(11800): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/Default/Half.h(1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/Default/BFloat16.h(1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/GPU/PacketMath.h(1): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/Default/GenericPacketMathFunctions.h(676): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/products/GeneralBlockPanelKernel.h(2063): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/core.hpp(1187): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/core.hpp(1187): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/core.hpp(1187): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1535): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypotf(x.real(), x.imag());
                        ^
  
  Remark: The warnings can be suppressed with "-diag-suppress <warning-number>"
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1535): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypotf(x.real(), x.imag());
                                  ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1535): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypotf(x.real(), x.imag());
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1535): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypotf(x.real(), x.imag());
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1540): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypot(x.real(), x.imag());
                       ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1540): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("abs") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypot(x.real(), x.imag());
                                 ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1540): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypot(x.real(), x.imag());
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1540): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return ::hypot(x.real(), x.imag());
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1564): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      float com = ::expf(x.real());
                           ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1565): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      float res_real = com * ::cosf(x.imag());
                                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1566): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      float res_imag = com * ::sinf(x.imag());
                                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1564): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      float com = ::expf(x.real());
                ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1565): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      float res_real = com * ::cosf(x.imag());
                     ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1566): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      float res_imag = com * ::sinf(x.imag());
                     ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1567): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<float>(res_real, res_imag);
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1572): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      double com = ::exp(x.real());
                           ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1573): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      double res_real = com * ::cos(x.imag());
                                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1574): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("exp") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      double res_imag = com * ::sin(x.imag());
                                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1572): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      double com = ::exp(x.real());
                 ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1573): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      double res_real = com * ::cos(x.imag());
                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1574): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      double res_imag = com * ::sin(x.imag());
                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(1575): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<double>(res_real, res_imag);
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }
                                                                                                                                                                                                                                                  ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(234): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a) { return std::complex<float>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator+(const float& a, const std::complex<float>& b) { return std::complex<float>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const std::complex<float>& b) { return std::complex<float>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator-(const float& a, const std::complex<float>& b) { return std::complex<float>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const std::complex<float>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator*(const float& a, const std::complex<float>& b) { return std::complex<float>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const std::complex<float>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const std::complex<float>& a, const float& b) { return std::complex<float>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<float> operator/(const float& a, const std::complex<float>& b) { return complex_divide(std::complex<float>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<float>& operator/=(std::complex<float>& a, const std::complex<float>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const std::complex<float>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<float>& a, const float& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const float& a, const std::complex<float>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const std::complex<float>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<float>& a, const float& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const float& a, const std::complex<float>& b) { return !(a == b); }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }
                                                                                                                                                                                                                                                      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(235): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
    __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a) { return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a) { return std::complex<double>(-numext::real(a), -numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) + numext::real(b), numext::imag(a) + numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) + b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator+(const double& a, const std::complex<double>& b) { return std::complex<double>(a + numext::real(b), numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const std::complex<double>& b) { return std::complex<double>(numext::real(a) - numext::real(b), numext::imag(a) - numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) - b, numext::imag(a)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator-(const double& a, const std::complex<double>& b) { return std::complex<double>(a - numext::real(b), -numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const std::complex<double>& b) { return complex_multiply(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) * b, numext::imag(a) * b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator*(const double& a, const std::complex<double>& b) { return std::complex<double>(a * numext::real(b), a * numext::imag(b)); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const std::complex<double>& b) { return complex_divide(a, b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const std::complex<double>& a, const double& b) { return std::complex<double>(numext::real(a) / b, numext::imag(a) / b); } __declspec(__host__) __declspec(__device__) inline std::complex<double> operator/(const double& a, const std::complex<double>& b) { return complex_divide(std::complex<double>(a, 0), b); } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) += numext::real(b); numext::imag_ref(a) += numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double>& b) { numext::real_ref(a) -= numext::real(b); numext::imag_ref(a) -= numext::imag(b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double>& b) { a = complex_multiply(a, b); return a; } __declspec(__host__) __declspec(__device__) inline std::complex<double>& operator/=(std::complex<double>& a, const std::complex<double>& b) { a = complex_divide(a, b); return a; } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const std::complex<double>& b) { return numext::real(a) == numext::real(b) && numext::imag(a) == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator==(const std::complex<double>& a, const double& b) { return numext::real(a) == b && numext::imag(a) == 0; } __declspec(__host__) __declspec(__device__) inline bool operator==(const double& a, const std::complex<double>& b) { return a == numext::real(b) && 0 == numext::imag(b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const std::complex<double>& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const std::complex<double>& a, const double& b) { return !(a == b); } __declspec(__host__) __declspec(__device__) inline bool operator!=(const double& a, const std::complex<double>& b) { return !(a == b); }

  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(223): warning #20012-D: __host__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(const DenseStorage&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(223): warning #20012-D: __device__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(const DenseStorage&) = default;
                                        ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(233): warning #20012-D: __host__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(const DenseStorage&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(233): warning #20012-D: __device__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(const DenseStorage&) = default;
                                        ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(248): warning #20012-D: __host__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(DenseStorage&&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(248): warning #20012-D: __device__ annotation is ignored on a function("DenseStorage") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage(DenseStorage&&) = default;
                                        ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(249): warning #20012-D: __host__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(DenseStorage&&) = default;
                   ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/DenseStorage.h(249): warning #20012-D: __device__ annotation is ignored on a function("operator=") that is explicitly defaulted on its first declaration
        __declspec(__host__) __declspec(__device__) DenseStorage& operator=(DenseStorage&&) = default;
                                        ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/warpers.hpp(235): warning #611-D: overloaded virtual function "cv::detail::PlaneWarper::buildMaps" is only partially overridden in class "cv::detail::AffineWarper"
    class  AffineWarper : public PlaneWarper
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/warpers.hpp(235): warning #611-D: overloaded virtual function "cv::detail::PlaneWarper::warp" is only partially overridden in class "cv::detail::AffineWarper"
    class  AffineWarper : public PlaneWarper
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/matchers.hpp(182): warning #611-D: overloaded virtual function "cv::detail::FeaturesMatcher::match" is only partially overridden in class "cv::detail::BestOf2NearestMatcher"
    class  BestOf2NearestMatcher : public FeaturesMatcher
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/matchers.hpp(236): warning #611-D: overloaded virtual function "cv::detail::FeaturesMatcher::match" is only partially overridden in class "cv::detail::AffineBestOf2NearestMatcher"
    class  AffineBestOf2NearestMatcher : public BestOf2NearestMatcher
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/blenders.hpp(100): warning #611-D: overloaded virtual function "cv::detail::Blender::prepare" is only partially overridden in class "cv::detail::FeatherBlender"
    class  FeatherBlender : public Blender
           ^
  
C:/Users/JHCHUN/Desktop/vcpkg/installed/x64-windows/include\opencv2/stitching/detail/blenders.hpp(127): warning #611-D: overloaded virtual function "cv::detail::Blender::prepare" is only partially overridden in class "cv::detail::MultiBandBlender"
    class  MultiBandBlender : public Blender
           ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NumTraits.h(176): warning #20013-D: calling a constexpr __host__ function("epsilon") from a __host__ __device__ function("epsilon") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return numext::numeric_limits<T>::epsilon();
               ^
            detected during instantiation of "Eigen::GenericNumTraits<T>::Real Eigen::GenericNumTraits<T>::epsilon() [with T=float]" at line 698 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NumTraits.h(176): warning #20013-D: calling a constexpr __host__ function("epsilon") from a __host__ __device__ function("epsilon") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return numext::numeric_limits<T>::epsilon();
               ^
            detected during instantiation of "Eigen::GenericNumTraits<T>::Real Eigen::GenericNumTraits<T>::epsilon() [with T=double]" at line 716 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NumTraits.h(228): warning #20013-D: calling a constexpr __host__ function("quiet_NaN") from a __host__ __device__ function("quiet_NaN") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return numext::numeric_limits<T>::quiet_NaN();
               ^
            detected during instantiation of "T Eigen::GenericNumTraits<T>::quiet_NaN() [with T=float]" at line 1802 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NumTraits.h(228): warning #20013-D: calling a constexpr __host__ function("quiet_NaN") from a __host__ __device__ function("quiet_NaN") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return numext::numeric_limits<T>::quiet_NaN();
               ^
            detected during instantiation of "T Eigen::GenericNumTraits<T>::quiet_NaN() [with T=double]" at line 1871 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\CXX11\src/Tensor/TensorRandom.h(115): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<float>(RandomToTypeUniform<float>(state, stream),
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\CXX11\src/Tensor/TensorRandom.h(120): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<double>(RandomToTypeUniform<double>(state, stream),
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\CXX11\src/Tensor/TensorRandom.h(228): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<float>(RandomToTypeNormal<float>(state, stream),
      ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\CXX11\src/Tensor/TensorRandom.h(233): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<double>(RandomToTypeNormal<double>(state, stream),
      ^
  
C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu(113): warning #177-D: variable "j" was declared but never referenced
        int j = blockIdx.y * blockDim.y + threadIdx.y;
            ^
  
C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu(188): warning #177-D: variable "d_transposed_rho" was declared but never referenced
        double* d_matrix, * d_norm, * d_norm_t, * d_rho, * d_transposed_rho, * d_n, * d_min, * d_max;
                                                           ^
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(110): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.real();
                 ^
            detected during:
              instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1232
              instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 234 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(110): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.real();
        ^
            detected during:
              instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1232
              instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<float>]" at line 234 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(158): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.imag();
                 ^
            detected during:
              instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1253
              instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 234 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(158): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.imag();
        ^
            detected during:
              instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=float]" at line 1253
              instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<float>]" at line 234 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(58): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<T>(
      ^
            detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 234
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(71): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm,
      ^
            detected during:
              instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 96
              instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=float]" at line 234
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(110): warning #20013-D: calling a constexpr __host__ function("real") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.real();
                 ^
            detected during:
              instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1232
              instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 235 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(110): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.real();
        ^
            detected during:
              instantiation of "T Eigen::internal::real_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1232
              instantiation of "Eigen::internal::real_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::real(const Scalar &) [with Scalar=std::complex<double>]" at line 235 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(158): warning #20013-D: calling a constexpr __host__ function("imag") from a __host__ __device__ function("run") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.imag();
                 ^
            detected during:
              instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1253
              instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 235 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/MathFunctions.h(158): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return x.imag();
        ^
            detected during:
              instantiation of "T Eigen::internal::imag_impl<std::complex<T>>::run(const std::complex<T> &) [with T=double]" at line 1253
              instantiation of "Eigen::internal::imag_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::imag(const Scalar &) [with Scalar=std::complex<double>]" at line 235 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(58): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<T>(
      ^
            detected during instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_multiply(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 235
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/arch/CUDA/Complex.h(71): warning #20015-D: calling a constexpr __host__ function from a __host__ __device__ function is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      return std::complex<T>((a_real * b_real + a_imag * b_imag) / norm,
      ^
            detected during:
              instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide_fast(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 96
              instantiation of "std::complex<T> Eigen::complex_operator_detail::complex_divide(const std::complex<T> &, const std::complex<T> &) [with T=double]" at line 235
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NumTraits.h(223): warning #20013-D: calling a constexpr __host__ function("infinity") from a __host__ __device__ function("infinity") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return numext::numeric_limits<T>::infinity();
               ^
            detected during:
              instantiation of "T Eigen::GenericNumTraits<T>::infinity() [with T=float]" at line 1368 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/BesselFunctionsImpl.h
              instantiation of "T Eigen::internal::generic_y0<T, float>::run(const T &) [with T=float]" at line 1481 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/BesselFunctionsImpl.h
              instantiation of "T Eigen::internal::bessel_y0_impl<T>::run(T) [with T=float]" at line 1940 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/BesselFunctionsImpl.h
              instantiation of "Eigen::internal::bessel_y0_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::bessel_y0(const Scalar &) [with Scalar=float]" at line 41 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/BesselFunctionsBFloat16.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NumTraits.h(212): warning #20013-D: calling a constexpr __host__ function("max") from a __host__ __device__ function("highest") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
        return (numext::numeric_limits<T>::max)();
               ^
            detected during:
              instantiation of "T Eigen::GenericNumTraits<T>::highest() [with T=float]" at line 736 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
              instantiation of "Scalar Eigen::internal::main_igamma_term(Scalar, Scalar) [with Scalar=float]" at line 786 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
              instantiation of "Scalar Eigen::internal::igammac_cf_impl<Scalar, mode>::run(Scalar, Scalar) [with Scalar=float, mode=Eigen::internal::VALUE]" at line 1091 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
              instantiation of "Scalar Eigen::internal::igamma_generic_impl<Scalar, mode>::run(Scalar, Scalar) [with Scalar=float, mode=Eigen::internal::VALUE]" at line 2015 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsImpl.h
              instantiation of "Eigen::internal::igamma_retval<Eigen::internal::global_math_functions_filtering_base<Scalar, void>::type>::type Eigen::numext::igamma(const Scalar &, const Scalar &) [with Scalar=float]" at line 37 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\unsupported\Eigen\src/SpecialFunctions/SpecialFunctionsBFloat16.h
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/Householder.h(80): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("makeHouseholder") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      const RealScalar tol = (std::numeric_limits<RealScalar>::min)();
                             ^
            detected during:
              instantiation of "void Eigen::MatrixBase<Derived>::makeHouseholder(EssentialPart &, Eigen::MatrixBase<Derived>::Scalar &, Eigen::MatrixBase<Derived>::RealScalar &) const [with Derived=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, 1, true>, -1, 1, false>, EssentialPart=Eigen::VectorBlock<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, 1, true>, -1, 1, false>, -1>]" at line 46
              instantiation of "void Eigen::MatrixBase<Derived>::makeHouseholderInPlace(Eigen::MatrixBase<Derived>::Scalar &, Eigen::MatrixBase<Derived>::RealScalar &) [with Derived=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, 1, true>, -1, 1, false>]" at line 540 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/QR/ColPivHouseholderQR.h
              instantiation of "void Eigen::ColPivHouseholderQR<_MatrixType>::computeInPlace() [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 477 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/QR/ColPivHouseholderQR.h
              instantiation of "Eigen::ColPivHouseholderQR<_MatrixType> &Eigen::ColPivHouseholderQR<_MatrixType>::compute(const Eigen::EigenBase<InputType> &) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, InputType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 229 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PermutationMatrix.h(97): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
        inline __declspec(__host__) __declspec(__device__) Index size() const { return Index(indices().size()); }
                                                                                ^
            detected during:
              instantiation of "Eigen::EigenBase<Derived>::Index Eigen::PermutationBase<Derived>::size() const [with Derived=Eigen::PermutationMatrix<-1, -1, int>]" at line 133
              instantiation of "void Eigen::PermutationBase<Derived>::setIdentity() [with Derived=Eigen::PermutationMatrix<-1, -1, int>]" at line 143
              instantiation of "void Eigen::PermutationBase<Derived>::setIdentity(Eigen::EigenBase<Derived>::Index) [with Derived=Eigen::PermutationMatrix<-1, -1, int>]" at line 576 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/QR/ColPivHouseholderQR.h
              instantiation of "void Eigen::ColPivHouseholderQR<_MatrixType>::computeInPlace() [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 477 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/QR/ColPivHouseholderQR.h
              instantiation of "Eigen::ColPivHouseholderQR<_MatrixType> &Eigen::ColPivHouseholderQR<_MatrixType>::compute(const Eigen::EigenBase<InputType> &) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, InputType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 229 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/BlasUtil.h(453): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      static inline __declspec(__host__) __declspec(__device__) ExtractType extract(const XprType& x) { return Base::extract(x.rhs()); }
                                                                                                        ^
            detected during:
              instantiation of "Eigen::internal::blas_traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Scalar, Scalar>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Scalar>, Plain>, NestedXpr>>::ExtractType Eigen::internal::blas_traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Scalar, Scalar>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Scalar>, Plain>, NestedXpr>>::extract(const Eigen::internal::blas_traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Scalar, Scalar>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Scalar>, Plain>, NestedXpr>>::XprType &) [with Scalar=double, NestedXpr=const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>, Plain=const Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 510
              instantiation of "Eigen::internal::blas_traits<Eigen::Transpose<NestedXpr>>::ExtractType Eigen::internal::blas_traits<Eigen::Transpose<NestedXpr>>::extract(const Eigen::internal::blas_traits<Eigen::Transpose<NestedXpr>>::XprType &) [with NestedXpr=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>]" at line 303 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/products/TriangularMatrixVector.h
              instantiation of "void Eigen::internal::trmv_selector<Mode, 1>::run(const Lhs &, const Rhs &, Dest &, const Dest::Scalar &) [with Mode=6, Lhs=Eigen::Transpose<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>>, Rhs=Eigen::Transpose<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>>, Dest=Eigen::Transpose<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>>]" at line 194 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/products/TriangularMatrixVector.h
              instantiation of "void Eigen::internal::triangular_product_impl<Mode, false, Lhs, true, Rhs, false>::run(Dest &, const Lhs &, const Rhs &, const Dest::Scalar &) [with Mode=5, Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, Dest=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>]" at line 783 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h
              instantiation of "void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::TriangularShape, ProductTag>::scaleAndAddTo(Dest &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::TriangularShape, ProductTag>::Scalar &) [with Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, ProductTag=3, Dest=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>]" at line 361 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h
              [ 7 instantiation contexts not shown ]
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/BlasUtil.h(455): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      { return x.lhs().functor().m_other * Base::extractScalarFactor(x.rhs()); }
        ^
            detected during:
              instantiation of "Scalar Eigen::internal::blas_traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Scalar, Scalar>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Scalar>, Plain>, NestedXpr>>::extractScalarFactor(const Eigen::internal::blas_traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<Scalar, Scalar>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<Scalar>, Plain>, NestedXpr>>::XprType &) [with Scalar=double, NestedXpr=const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>, Plain=const Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 511
              instantiation of "Eigen::internal::blas_traits<Eigen::Transpose<NestedXpr>>::Scalar Eigen::internal::blas_traits<Eigen::Transpose<NestedXpr>>::extractScalarFactor(const Eigen::internal::blas_traits<Eigen::Transpose<NestedXpr>>::XprType &) [with NestedXpr=const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>]" at line 306 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/products/TriangularMatrixVector.h
              instantiation of "void Eigen::internal::trmv_selector<Mode, 1>::run(const Lhs &, const Rhs &, Dest &, const Dest::Scalar &) [with Mode=6, Lhs=Eigen::Transpose<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>>, Rhs=Eigen::Transpose<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>>, Dest=Eigen::Transpose<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>>]" at line 194 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/products/TriangularMatrixVector.h
              instantiation of "void Eigen::internal::triangular_product_impl<Mode, false, Lhs, true, Rhs, false>::run(Dest &, const Lhs &, const Rhs &, const Dest::Scalar &) [with Mode=5, Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, Dest=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>]" at line 783 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h
              instantiation of "void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::TriangularShape, ProductTag>::scaleAndAddTo(Dest &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::TriangularShape, ProductTag>::Scalar &) [with Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, ProductTag=3, Dest=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>]" at line 361 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h
              [ 7 instantiation contexts not shown ]
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      { Derived::scaleAndAddTo(dst,lhs,rhs,alpha); }
        ^
            detected during:
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar &) [with Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, Derived=Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, Eigen::DenseShape, Eigen::TriangularShape, 3>, Dst=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>]" at line 349
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst &, const Lhs &, const Rhs &) [with Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, Derived=Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, Eigen::DenseShape, Eigen::TriangularShape, 3>, Dst=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>]" at line 148
              instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>, Lhs=Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Rhs=Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, Options=0, Scalar=double]" at line 890 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>, Src=Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, 0>, Func=Eigen::internal::assign_op<double, double>]" at line 43 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NoAlias.h
              instantiation of "ExpressionType &Eigen::NoAlias<ExpressionType, StorageBase>::operator=(const StorageBase<OtherDerived> &) [with ExpressionType=Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 1, -1, true>, 1, -1, false>, StorageBase=Eigen::MatrixBase, OtherDerived=Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, 1, -1, 1, 1, -1>>, const Eigen::Transpose<const Eigen::Block<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, 1, true>, -1, 1, false>>>, Eigen::TriangularView<const Eigen::Block<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, -1, -1, false>, 5U>, 0>]" at line 64 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/BlockHouseholder.h
              [ 2 instantiation contexts not shown ]
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      { Derived::scaleAndAddTo(dst,lhs,rhs,alpha); }
        ^
            detected during:
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar &) [with Lhs=Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Rhs=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 349
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst &, const Lhs &, const Rhs &) [with Lhs=Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Rhs=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 148
              instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Lhs=Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Rhs=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Options=0, Scalar=double]" at line 890 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::Product<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 0>, Func=Eigen::internal::assign_op<double, double>]" at line 797 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::Product<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>>, 6U>, Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 0>]" at line 594 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              [ 3 instantiation contexts not shown ]
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      { Derived::scaleAndAddTo(dst,lhs,rhs,alpha); }
        ^
            detected during:
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar &) [with Lhs=Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 349
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst &, const Lhs &, const Rhs &) [with Lhs=Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 148
              instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Lhs=Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Options=0, Scalar=double]" at line 890 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::Product<Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0>, Func=Eigen::internal::assign_op<double, double>]" at line 797 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::Product<Eigen::TriangularView<Eigen::Matrix<double, -1, -1, 1, -1, -1>, 2U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0>]" at line 883 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              [ 7 instantiation contexts not shown ]
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      { Derived::scaleAndAddTo(dst,lhs,rhs,alpha); }
        ^
            detected during:
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar &) [with Lhs=Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 349
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst &, const Lhs &, const Rhs &) [with Lhs=Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 148
              instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::SrcXprType &, const Eigen::internal::assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Lhs=Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Options=0, Scalar=double]" at line 890 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::Product<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0>, Func=Eigen::internal::assign_op<double, double>]" at line 797 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::Product<Eigen::TriangularView<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1, 1, -1, -1>>, 1U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0>]" at line 883 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              [ 7 instantiation contexts not shown ]
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
      { Derived::scaleAndAddTo(dst,lhs,rhs,alpha); }
        ^
            detected during:
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst &, const Lhs &, const Rhs &, const Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar &) [with Lhs=Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>]" at line 357
              instantiation of "void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::subTo(Dst &, const Lhs &, const Rhs &) [with Lhs=Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Derived=Eigen::internal::generic_product_impl<Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, Eigen::TriangularShape, Eigen::DenseShape, 3>, Dst=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>]" at line 178
              instantiation of "void Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::sub_assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::run(DstXprType &, const Eigen::internal::Assignment<DstXprType, Eigen::Product<Lhs, Rhs, Options>, Eigen::internal::sub_assign_op<Scalar, Scalar>, Eigen::internal::Dense2Dense, Eigen::internal::enable_if<<expression>, void>::type>::SrcXprType &, const Eigen::internal::sub_assign_op<Scalar, Scalar> &) [with DstXprType=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Lhs=Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Rhs=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Options=0, Scalar=double]" at line 890 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, Src=Eigen::Product<Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0>, Func=Eigen::internal::sub_assign_op<double, double>]" at line 59 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/NoAlias.h
              instantiation of "ExpressionType &Eigen::NoAlias<ExpressionType, StorageBase>::operator-=(const StorageBase<OtherDerived> &) [with ExpressionType=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, StorageBase=Eigen::MatrixBase, OtherDerived=Eigen::Product<Eigen::TriangularView<const Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, 5U>, Eigen::Matrix<double, -1, -1, 0, -1, -1>, 0>]" at line 103 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/BlockHouseholder.h
              instantiation of "void Eigen::internal::apply_block_householder_on_the_left(MatrixType &, const VectorsType &, const CoeffsType &, __nv_bool) [with MatrixType=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, VectorsType=Eigen::Block<Eigen::Matrix<double, -1, -1, 0, -1, -1>, -1, -1, false>, CoeffsType=Eigen::VectorBlock<const Eigen::Matrix<double, -1, 1, 0, -1, 1>, -1>]" at line 399 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::applyThisOnTheLeft(Dest &, Workspace &, __nv_bool) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 320 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(320): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
              applyThisOnTheLeft(dst,workspace,true);
                                               ^
            detected during:
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(322): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
              applyThisOnTheLeft(dst,workspace,true);
                                               ^
            detected during:
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, 1, -1, 1, 1, -1>]" at line 232 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PermutationMatrix.h(91): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
        inline __declspec(__host__) __declspec(__device__) Index rows() const { return Index(indices().size()); }
                                                                                ^
            detected during:
              instantiation of "Eigen::EigenBase<Derived>::Index Eigen::PermutationBase<Derived>::rows() const [with Derived=Eigen::PermutationMatrix<-1, -1, int>]" at line 357 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 755 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "void Eigen::PlainObjectBase<Derived>::_resize_to_match(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 627 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::operator=(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 238 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/Matrix.h
              instantiation of "Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> &Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::EigenBase<OtherDerived> &) [with _Scalar=double, _Rows=-1, _Cols=-1, _Options=0, _MaxRows=-1, _MaxCols=-1, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 238 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PermutationMatrix.h(94): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
        inline __declspec(__host__) __declspec(__device__) Index cols() const { return Index(indices().size()); }
                                                                                ^
            detected during:
              instantiation of "Eigen::EigenBase<Derived>::Index Eigen::PermutationBase<Derived>::cols() const [with Derived=Eigen::PermutationMatrix<-1, -1, int>]" at line 357 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "void Eigen::PlainObjectBase<Derived>::resizeLike(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 755 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "void Eigen::PlainObjectBase<Derived>::_resize_to_match(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 627 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::operator=(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 238 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/Matrix.h
              instantiation of "Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> &Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::EigenBase<OtherDerived> &) [with _Scalar=double, _Rows=-1, _Cols=-1, _Options=0, _MaxRows=-1, _MaxCols=-1, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 238 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h(974): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
        src.evalTo(dst);
        ^
            detected during:
              instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::EigenBase2EigenBase, Weak>::run(DstXprType &, const SrcXprType &, const Eigen::internal::assign_op<DstXprType::Scalar, SrcXprType::Scalar> &) [with DstXprType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, SrcXprType=Eigen::PermutationMatrix<-1, -1, int>, Functor=Eigen::internal::assign_op<double, void>, Weak=void]" at line 890
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::PermutationMatrix<-1, -1, int>, Func=Eigen::internal::assign_op<double, void>]" at line 858
              instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &, const Func &, Eigen::internal::enable_if<<expression>, void *>::type) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::PermutationMatrix<-1, -1, int>, Func=Eigen::internal::assign_op<double, void>]" at line 836
              instantiation of "void Eigen::internal::call_assignment(Dst &, const Src &) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::PermutationMatrix<-1, -1, int>]" at line 75 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/Assign.h
              instantiation of "Derived &Eigen::MatrixBase<Derived>::operator=(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 628 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::operator=(const Eigen::EigenBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 238 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/Matrix.h
              instantiation of "Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> &Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::EigenBase<OtherDerived> &) [with _Scalar=double, _Rows=-1, _Cols=-1, _Options=0, _MaxRows=-1, _MaxCols=-1, OtherDerived=Eigen::PermutationMatrix<-1, -1, int>]" at line 238 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 0, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 692 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(320): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
              applyThisOnTheLeft(dst,workspace,true);
                                               ^
            detected during:
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, -1, 1, 0, -1, 1>]" at line 176 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 1, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 693 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(322): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
              applyThisOnTheLeft(dst,workspace,true);
                                               ^
            detected during:
              instantiation of "void Eigen::HouseholderSequence<VectorsType, CoeffsType, Side>::evalTo(Dest &, Workspace &) const [with VectorsType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, CoeffsType=Eigen::Matrix<double, -1, 1, 0, -1, 1>, Side=1, Dest=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Workspace=Eigen::Matrix<double, -1, 1, 0, -1, 1>]" at line 176 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "__nv_bool Eigen::internal::qr_preconditioner_impl<MatrixType, 2, 1, true>::run(Eigen::JacobiSVD<MatrixType, 2> &, const MatrixType &) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>]" at line 693 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Jacobi/Jacobi.h(100): warning #20013-D: calling a constexpr __host__ function("min") from a __host__ __device__ function("makeJacobi") is not allowed. The experimental flag '--expt-relaxed-constexpr' can be used to allow this.
      if(deno < (std::numeric_limits<RealScalar>::min)())
                ^
            detected during:
              instantiation of "__nv_bool Eigen::JacobiRotation<Scalar>::makeJacobi(const Eigen::JacobiRotation<Scalar>::RealScalar &, const Scalar &, const Eigen::JacobiRotation<Scalar>::RealScalar &) [with Scalar=double]" at line 141
              instantiation of "__nv_bool Eigen::JacobiRotation<Scalar>::makeJacobi(const Eigen::MatrixBase<Derived> &, Eigen::Index, Eigen::Index) [with Scalar=double, Derived=Eigen::Matrix<double, 2, 2, 0, 2, 2>]" at line 47 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/misc/RealSvd2x2.h
              instantiation of "void Eigen::internal::real_2x2_jacobi_svd(const MatrixType &, Index, Index, Eigen::JacobiRotation<RealScalar> *, Eigen::JacobiRotation<RealScalar> *) [with MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, RealScalar=double, Index=Eigen::Index]" at line 730 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner> &Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::compute(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 549 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/SVD/JacobiSVD.h
              instantiation of "Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::JacobiSVD(const Eigen::JacobiSVD<_MatrixType, QRPreconditioner>::MatrixType &, unsigned int) [with _MatrixType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, QRPreconditioner=2]" at line 28 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/CoreEvaluators.h(589): warning #20014-D: calling a __host__ function from a __host__ __device__ function is not allowed
        return m_d.func()(m_d.argImpl.coeff(index));
        ^
            detected during:
              instantiation of "Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::CoeffReturnType Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<UnaryOp, ArgType>, Eigen::internal::IndexBased, Eigen::CwiseUnaryOp<UnaryOp, ArgType>::Scalar>::coeff(Eigen::Index) const [with UnaryOp=lambda [](double)->double, ArgType=const Eigen::Matrix<double, -1, 1, 0, -1, 1>]" at line 660 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignCoeff(Eigen::Index) [with DstEvaluatorTypeT=Eigen::internal::evaluator<Eigen::Matrix<double, -1, -1, 0, -1, -1>>, SrcEvaluatorTypeT=Eigen::internal::evaluator<Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>>, Functor=Eigen::internal::assign_op<double, double>, Version=0]" at line 518 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::dense_assignment_loop<Kernel, 1, 0>::run(Kernel &) [with Kernel=Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, -1, -1, 0, -1, -1>>, Eigen::internal::evaluator<Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>>, Eigen::internal::assign_op<double, double>, 0>]" at line 785 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_dense_assignment_loop(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, SrcXprType=Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>, Functor=Eigen::internal::assign_op<double, double>]" at line 954 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType &, const SrcXprType &, const Functor &) [with DstXprType=Eigen::Matrix<double, -1, -1, 0, -1, -1>, SrcXprType=Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>, Functor=Eigen::internal::assign_op<double, double>, Weak=void]" at line 890 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h
              instantiation of "void Eigen::internal::call_assignment_no_alias(Dst &, const Src &, const Func &) [with Dst=Eigen::Matrix<double, -1, -1, 0, -1, -1>, Src=Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>, Func=Eigen::internal::assign_op<double, double>]" at line 797 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Derived &Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>]" at line 594 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PlainObjectBase.h
              instantiation of "Eigen::PlainObjectBase<Derived>::PlainObjectBase(const Eigen::DenseBase<OtherDerived> &) [with Derived=Eigen::Matrix<double, -1, -1, 0, -1, -1>, OtherDerived=Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>]" at line 424 of C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/Matrix.h
              instantiation of "Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const Eigen::EigenBase<OtherDerived> &) [with _Scalar=double, _Rows=-1, _Cols=-1, _Options=0, _MaxRows=-1, _MaxCols=-1, OtherDerived=Eigen::CwiseUnaryOp<lambda [](double)->double, const Eigen::Matrix<double, -1, 1, 0, -1, 1>>]" at line 29 of C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PermutationMatrix.h(91): warning #20011-D: calling a __host__ function("Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::indices() const") from a __host__ __device__ function("Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::rows const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PermutationMatrix.h(94): warning #20011-D: calling a __host__ function("Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::indices() const") from a __host__ __device__ function("Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::cols const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/PermutationMatrix.h(97): warning #20011-D: calling a __host__ function("Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::indices() const") from a __host__ __device__ function("Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::size const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(320): warning #20011-D: calling a __host__ function("void Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::applyThisOnTheLeft< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > (T1 &, T2 &, bool) const") from a __host__ __device__ function("Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::evalTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> >  const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(322): warning #20011-D: calling a __host__ function("void Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::applyThisOnTheLeft< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > (T1 &, T2 &, bool) const") from a __host__ __device__ function("Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::evalTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> >  const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(320): warning #20011-D: calling a __host__ function("void Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::applyThisOnTheLeft< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> > (T1 &, T2 &, bool) const") from a __host__ __device__ function("Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::evalTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> >  const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Householder/HouseholderSequence.h(322): warning #20011-D: calling a __host__ function("void Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::applyThisOnTheLeft< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> > (T1 &, T2 &, bool) const") from a __host__ __device__ function("Eigen::HouseholderSequence< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> , (int)1> ::evalTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> >  const") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20011-D: calling a __host__ function("void Eigen::internal::generic_product_impl< ::Eigen::CwiseBinaryOp< ::Eigen::internal::scalar_product_op<double, double> , const  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_constant_op<double> , const  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > , const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > ,  ::Eigen::TriangularView<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u> ,  ::Eigen::DenseShape,  ::Eigen::TriangularShape, (int)3> ::scaleAndAddTo< ::Eigen::Block< ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)1, (int)-1, (bool)1> , (int)1, (int)-1, (bool)0> > (T1 &, const  ::Eigen::CwiseBinaryOp< ::Eigen::internal::scalar_product_op<double, double> , const  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_constant_op<double> , const  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > , const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > >  &, const  ::Eigen::TriangularView<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u>  &, const double &)") from a __host__ __device__ function("Eigen::internal::generic_product_impl_base< ::Eigen::CwiseBinaryOp< ::Eigen::internal::scalar_product_op<double, double> , const  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_constant_op<double> , const  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > , const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > ,  ::Eigen::TriangularView<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u> ,  ::Eigen::internal::generic_product_impl< ::Eigen::CwiseBinaryOp< ::Eigen::internal::scalar_product_op<double, double> , const  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_constant_op<double> , const  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > , const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > ,  ::Eigen::TriangularView<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u> ,  ::Eigen::DenseShape,  ::Eigen::TriangularShape, (int)3> > ::scaleAndAddTo< ::Eigen::Block< ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (int)1, (int)-1, (bool)1> , (int)1, (int)-1, (bool)0> > ") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/BlasUtil.h(453): warning #20011-D: calling a __host__ function("Eigen::internal::blas_traits< ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > ::extract(const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> >  &)") from a __host__ __device__ function("Eigen::internal::blas_traits< ::Eigen::CwiseBinaryOp< ::Eigen::internal::scalar_product_op<double, double> , const  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_constant_op<double> , const  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > , const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > > ::extract") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/BlasUtil.h(455): warning #20011-D: calling a __host__ function("Eigen::internal::blas_traits< ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > ::extractScalarFactor(const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> >  &)") from a __host__ __device__ function("Eigen::internal::blas_traits< ::Eigen::CwiseBinaryOp< ::Eigen::internal::scalar_product_op<double, double> , const  ::Eigen::CwiseNullaryOp< ::Eigen::internal::scalar_constant_op<double> , const  ::Eigen::Matrix<double, (int)1, (int)-1, (int)1, (int)1, (int)-1> > , const  ::Eigen::Transpose<const  ::Eigen::Block<const  ::Eigen::Block<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (int)-1, (int)1, (bool)1> , (int)-1, (int)1, (bool)0> > > > ::extractScalarFactor") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20011-D: calling a __host__ function("void Eigen::internal::generic_product_impl< ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> > , (unsigned int)6u> ,  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> ::scaleAndAddTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > (T1 &, const  ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> > , (unsigned int)6u>  &, const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0>  &, const double &)") from a __host__ __device__ function("Eigen::internal::generic_product_impl_base< ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> > , (unsigned int)6u> ,  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> ,  ::Eigen::internal::generic_product_impl< ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> > , (unsigned int)6u> ,  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> > ::scaleAndAddTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > ") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20011-D: calling a __host__ function("void Eigen::internal::generic_product_impl< ::Eigen::TriangularView< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (unsigned int)2u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> ::scaleAndAddTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > (T1 &, const  ::Eigen::TriangularView< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (unsigned int)2u>  &, const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1>  &, const double &)") from a __host__ __device__ function("Eigen::internal::generic_product_impl_base< ::Eigen::TriangularView< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (unsigned int)2u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::internal::generic_product_impl< ::Eigen::TriangularView< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> , (unsigned int)2u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> > ::scaleAndAddTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > ") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20011-D: calling a __host__ function("void Eigen::internal::generic_product_impl< ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> > , (unsigned int)1u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> ::scaleAndAddTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > (T1 &, const  ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> > , (unsigned int)1u>  &, const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1>  &, const double &)") from a __host__ __device__ function("Eigen::internal::generic_product_impl_base< ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> > , (unsigned int)1u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::internal::generic_product_impl< ::Eigen::TriangularView<const  ::Eigen::Transpose<const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)1, (int)-1, (int)-1> > , (unsigned int)1u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> > ::scaleAndAddTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > ") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/ProductEvaluators.h(361): warning #20011-D: calling a __host__ function("void Eigen::internal::generic_product_impl< ::Eigen::TriangularView<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> ::scaleAndAddTo< ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> > (T1 &, const  ::Eigen::TriangularView<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u>  &, const  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1>  &, const double &)") from a __host__ __device__ function("Eigen::internal::generic_product_impl_base< ::Eigen::TriangularView<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::internal::generic_product_impl< ::Eigen::TriangularView<const  ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> , (unsigned int)5u> ,  ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::TriangularShape,  ::Eigen::DenseShape, (int)3> > ::scaleAndAddTo< ::Eigen::Block< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> , (int)-1, (int)-1, (bool)0> > ") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/AssignEvaluator.h(974): warning #20011-D: calling a __host__ function("void Eigen::PermutationBase< ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> > ::evalTo< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> > ( ::Eigen::MatrixBase<T1>  &) const") from a __host__ __device__ function("Eigen::internal::Assignment< ::Eigen::Matrix<double, (int)-1, (int)-1, (int)0, (int)-1, (int)-1> ,  ::Eigen::PermutationMatrix<(int)-1, (int)-1, int> ,  ::Eigen::internal::assign_op<double, void> ,  ::Eigen::internal::EigenBase2EigenBase, void> ::run") is not allowed
  
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/CoreEvaluators.h(589): warning #20011-D: calling a __host__ function("LightMatrixPinv(const     ::std::vector< ::Eigen::Matrix<float, (int)4, (int)1, (int)0, (int)4, (int)1> , ::std::allocator< ::Eigen::Matrix<float, (int)4, (int)1, (int)0, (int)4, (int)1> > >  &)::[lambda(double) (instance 1)]::operator ()(double) const") from a __host__ __device__ function("Eigen::internal::unary_evaluator< ::Eigen::CwiseUnaryOp<    ::LightMatrixPinv(const     ::std::vector< ::Eigen::Matrix<float, (int)4, (int)1, (int)0, (int)4, (int)1> , ::std::allocator< ::Eigen::Matrix<float, (int)4, (int)1, (int)0, (int)4, (int)1> > >  &)   ::[lambda(double) (instance 1)], const  ::Eigen::Matrix<double, (int)-1, (int)1, (int)0, (int)-1, (int)1> > ,  ::Eigen::internal::IndexBased, double> ::coeff const") is not allowed
  
  main.cu
  tmpxft_00071bb4_00000000-7_main.cudafe1.cpp
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\include\driver_types.h(1329): warning C4819: 현재 코드 페이지(949)에서 표시할 수 없는 문자가 파일에 들어 있습니다. 데이터가 손실되지 않게 하려면 해당 파일을 유니코드 형식으로 저장하십시오.
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(77): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(79): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(81): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(83): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(85): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(86): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(87): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(88): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(89): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(90): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(91): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(92): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(93): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(94): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\vcpkg\installed\x64-windows\include\Eigen\src/Core/util/DisableStupidWarnings.h(95): warning C4068: 알 수 없는 pragma 'diag_suppress'
C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu(20): warning C4267: '초기화 중': 'size_t'에서 'int'(으)로 변환하면서 데이터가 손실될 수 있습니다.
C:\Users\JHCHUN\Desktop\CudaPorting\CudaPorting\main.cu(188): warning C4101: 'd_transposed_rho' :참조되지 않은 지역 변수입니다.
     C:\Users\JHCHUN\Desktop\CudaPorting\x64\Release\CudaPorting.lib 라이브러리 및 C:\Users\JHCHUN\Desktop\CudaPorting\x64\Release\CudaPorting.exp 개체를 생성하고 있습니다.
LINK : warning LNK4098: 'LIBCMT' defaultlib가 다른 라이브러리와 충돌합니다. /NODEFAULTLIB:library를 사용하십시오.
  LINK : /LTCG를 지정했지만 코드를 생성할 필요가 없습니다. 명령줄에서 /LTCG를 제거하면 링커 성능이 향상됩니다.
  CudaPorting.vcxproj -> C:\Users\JHCHUN\Desktop\CudaPorting\x64\Release\CudaPorting.exe
